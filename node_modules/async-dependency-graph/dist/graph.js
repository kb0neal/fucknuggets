"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mutex_1 = require("./mutex");
/**
 * Base dependency graph class.
 */
var Graph = /** @class */ (function () {
    function Graph() {
        this.nodes = {};
        this.outgoingEdges = {};
        this.incomingEdges = {};
    }
    /**
     * Add a node to the graph.
     * @param node Node object.
     */
    Graph.prototype.addNode = function (node) {
        if (this.hasNode(node.name))
            throw new Error("A node with the name of \"" + node.name + "\" already exists in the graph!");
        this.nodes[node.name] = node;
        this.outgoingEdges[node.name] = [];
        this.incomingEdges[node.name] = [];
    };
    /**
     * Remove a node by name from the graph.
     * @param name Node name.
     */
    Graph.prototype.removeNode = function (name) {
        if (!this.hasNode(name))
            throw new Error("A node with the name of \"" + name + "\" does not exist in the graph!");
        delete this.nodes[name];
        delete this.outgoingEdges[name];
        delete this.incomingEdges[name];
        for (var dependent in this.incomingEdges) {
            if (this.incomingEdges[dependent].includes(name))
                this.incomingEdges[dependent].splice(dependent.indexOf(name), 1);
        }
        for (var dependency in this.outgoingEdges) {
            if (this.outgoingEdges[dependency].includes(name))
                this.outgoingEdges[dependency].splice(dependency.indexOf(name), 1);
        }
    };
    /**
     * Checks to see if the graph contains a Node by name.
     * @param name Node name.
     */
    Graph.prototype.hasNode = function (name) {
        return this.nodes.hasOwnProperty(name);
    };
    Object.defineProperty(Graph.prototype, "size", {
        /**
         * Returns the number of nodes in a graph.
         */
        get: function () {
            return Object.keys(this.nodes).length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns the Node instance given a node name.
     * @param name Node name.
     */
    Graph.prototype.getNode = function (name) {
        if (this.hasNode(name))
            return this.nodes[name];
        throw new Error("Node \"" + name + "\" not found!");
    };
    /**
     *  Adds a node dependence. "from" is dependent on "to"
     *  @param from Node name.
     *  @param to  Node name.
     */
    Graph.prototype.addDependency = function (from, to) {
        if (!this.hasNode(from))
            throw new Error("Node does not exist: " + from);
        if (!this.hasNode(to))
            throw new Error("Node does not exist: " + to);
        if (from === to)
            throw new Error("Cannot add self dependency: " + to);
        if (!this.outgoingEdges[from].includes(to)) {
            this.outgoingEdges[from].push(to);
        }
        if (!this.incomingEdges[to].includes(from)) {
            this.incomingEdges[to].push(from);
        }
    };
    /**
     * Removes a node dependence. "from" is no longer dependent on "to".
     * @param from Node name.
     * @param to  Node name.
     * @todo Test this function.
     */
    Graph.prototype.removeDependency = function (from, to) {
        console.warn('removeDependency() has not been tested.');
        if (!this.hasNode(from))
            throw new Error("Node does not exist: " + from);
        if (!this.hasNode(to))
            throw new Error("Node does not exist: " + to);
        if (from === to)
            throw new Error("Cannot remove self dependency: " + to);
        if (!this.outgoingEdges[from].includes(to)) {
            this.outgoingEdges[from].splice(this.outgoingEdges[from].indexOf(to), 1);
        }
        if (!this.incomingEdges[to].includes(from)) {
            this.incomingEdges[to].splice(this.incomingEdges[to].indexOf(to), 1);
        }
    };
    /**
     * Get dependency node names for a Node by name. (Required nodes for this node to execute).
     * @param name Node name.
     */
    Graph.prototype.dependenciesOf = function (name) {
        return this.outgoingEdges[name];
    };
    /**
     * Get dependents node names for a Node by name. (Nodes that require this node to complete).
     * @param name Node name.
     */
    Graph.prototype.dependentsOf = function (name) {
        return this.incomingEdges[name];
    };
    /**
     * Breadth first search.
     */
    Graph.prototype.traverse = function () {
        var _this = this;
        // Clear all complete node mutexes.
        Object.keys(this.nodes).map(function (name) { return _this.getNode(name).clearMutex(); });
        // Visiting a node recursively calls visit on each node's dependents.
        var visit = function (node) {
            // First await all dependencies
            return Promise.all(_this.dependenciesOf(node.name).map(function (dependencyName) { return _this.nodes[dependencyName].awaitData(); }))
                .then(function () {
                node.signalDependenciesReady();
                if (_this.dependentsOf(node.name).length > 0) {
                    // Then recursively visit all dependents
                    return Promise.all(_this.dependentsOf(node.name).map(function (dependentName) { return visit(_this.getNode(dependentName)); }));
                }
                else {
                    // node has no dependents so await data
                    return node.awaitData();
                }
            });
        };
        // Find nodes with no dependencies
        var rootNodeNames = Object.keys(this.nodes).filter(function (name) { return _this.dependenciesOf(name).length === 0; });
        if (rootNodeNames.length === 0 && Object.keys(this.nodes).length > 0)
            return Promise.reject(new Error('The graph is circular. Cannot traverse graph due to no root node.'));
        // Start recursive traversal from root nodes.
        return Promise.all(rootNodeNames.map(function (name) { return visit(_this.nodes[name]); }));
    };
    /**
     * Clears the value of a node and the values of dependent nodes
     * @param name Node name.
     */
    Graph.prototype.clearNodeAndDependents = function (name) {
        var _this = this;
        var node = this.getNode(name);
        var visitAndClear = function (node) {
            if (node.hasData()) {
                node.clearData();
                return Promise.all(_this.dependentsOf(node.name).map(function (dependentName) { return visitAndClear(_this.getNode(dependentName)); }));
            }
            else {
                return Promise.resolve();
            }
        };
        return visitAndClear(node);
    };
    /**
     * Resets the graph by resetting each node in the graph.
     */
    Graph.prototype.reset = function () {
        for (var name in this.nodes) {
            this.nodes[name].reset();
        }
    };
    /**
     * Prints graph nodes and node dependents.
     */
    Graph.prototype.ls = function () {
        for (var name in this.nodes) {
            console.log(name);
            console.log(this.dependentsOf(name));
        }
    };
    return Graph;
}());
exports.Graph = Graph;
var Node = /** @class */ (function () {
    function Node(name, promise) {
        this.locked = false;
        this._name = name;
        this._promise = promise;
    }
    Object.defineProperty(Node.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Await data.
     * @returns A `Promise<T | null>` that resolves when the node's data is ready.
     */
    Node.prototype.awaitData = function () {
        var _this = this;
        if (!this.mutex) {
            this.mutex = new mutex_1.Mutex(function () { return _this._data !== undefined; });
        }
        return new Promise(function (resolve, reject) {
            _this.mutex.await(function (error) {
                if (error)
                    return reject(error);
                resolve(_this._data);
            });
        });
    };
    Node.prototype.signalDependenciesReady = function () {
        var _this = this;
        if (!this.mutex) {
            this.mutex = new mutex_1.Mutex(function () { return _this._data !== undefined; });
        }
        if (this._data === undefined) {
            // Only allow to _promise once
            if (this.locked === true)
                return;
            this.locked = true;
            var promise = this._promise();
            if (promise === undefined)
                throw new Error("Node \"" + this._name + "\" has undefined promise.");
            promise.then(function (data) {
                _this._data = data;
                _this.locked = false;
                _this.mutex.ready();
            }).catch(function (error) {
                _this._data = null;
                _this.locked = false;
                _this.mutex.ready(error);
            });
        }
        else {
            // Allow _data to be set externally from promise
            this.mutex.ready();
        }
    };
    Node.prototype.setData = function (data) {
        this._data = data;
        this.signalDependenciesReady();
    };
    /**
     * Resets node. Clears all node data and resets its mutex.
     */
    Node.prototype.reset = function () {
        this.clearData();
        this.clearMutex();
    };
    Node.prototype.clearMutex = function () {
        if (this.hasData())
            this.mutex = undefined;
    };
    Node.prototype.hasData = function () {
        return this._data !== undefined;
    };
    Node.prototype.clearData = function () {
        this._data = undefined;
    };
    return Node;
}());
exports.Node = Node;
//# sourceMappingURL=data:application/json;base64,